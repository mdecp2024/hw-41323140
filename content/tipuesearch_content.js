var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323140 \n 個人網站: https://mdecp2024.github.io/hw-41323140/content/index.html \n 其他資訊: \n \xa0 \xa0 \xa0 \xa0\xa0 期末參考資料 \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n 題目三 \n \n 做這三個題目讓我對這些軟體更加熟悉了 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '作業一 \n \n 已知可以用 Python 程式由上往下列印三角形 *, 或由左往右列印三角形 *, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. \n w11_hw1 \n \n 作業二 \n \n 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n w11_hw2 \n \n 心得: \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '第一題:\xa0 \n 程式 1 \n 程式 2 \n 第二題:\xa0 \n 程式 1 \n 第三題: \n 程式 1 \n 第四題: \n 程式 1 \n 第五題: \n 程式 1 \n 第六題: \n 程式 1 \n 第七題: \n 程式 1 \n 程式 2 \n 程式 3 \n 第八題: \n 程式 1 \n 第九題: \n 程式 1 \n 第十題: \n 程式 1 \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '\n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n 正確答案 \n \n \n \n \n \n \n \n 心得: 這個程式碼花了好多時間問了 Chat gpt 好多次，才問到現在這個圖形。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14', 'text': '請根據兩個圓繪圖所圍成的 區域 (目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. \n 1. 三個圓的區域塗色任務 \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 定義初始化畫布函式\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\ncanvas = html.CANVAS(width=canvas_width, height=canvas_height)\nbrython_div = doc[id]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\nreturn canvas, ctx\n\n# 定義隨機顏色生成函式\ndef random_color_generator():\nr = random.randint(0, 255)\ng = random.randint(0, 255)\nb = random.randint(0, 255)\nreturn f"rgb({r}, {g}, {b})"\n\n# 判斷點是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\nreturn (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心座標和半徑，並進行塗色處理\ndef draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\ncanvas, ctx = initialize_canvas(400, 400)\nctx.clearRect(0, 0, canvas.width, canvas.height)\n\ncolor_dict = {}\n\nfor py in range(0, canvas.height):\nfor px in range(0, canvas.width):\n# 判斷點是否在三個圓內\nin_circle1 = is_point_in_circle(px, py, x1, y1, r1)\nin_circle2 = is_point_in_circle(px, py, x2, y2, r2)\nin_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n\nif in_circle1 and in_circle2 and in_circle3:\nif "all_three" not in color_dict:\ncolor_dict["all_three"] = random_color_generator()\ncurrent_color = color_dict["all_three"]\nelif in_circle1 and in_circle2:\nif "circle1_circle2" not in color_dict:\ncolor_dict["circle1_circle2"] = random_color_generator()\ncurrent_color = color_dict["circle1_circle2"]\nelif in_circle1 and in_circle3:\nif "circle1_circle3" not in color_dict:\ncolor_dict["circle1_circle3"] = random_color_generator()\ncurrent_color = color_dict["circle1_circle3"]\nelif in_circle2 and in_circle3:\nif "circle2_circle3" not in color_dict:\ncolor_dict["circle2_circle3"] = random_color_generator()\ncurrent_color = color_dict["circle2_circle3"]\nelif in_circle1:\nif "circle1" not in color_dict:\ncolor_dict["circle1"] = random_color_generator()\ncurrent_color = color_dict["circle1"]\nelif in_circle2:\nif "circle2" not in color_dict:\ncolor_dict["circle2"] = random_color_generator()\ncurrent_color = color_dict["circle2"]\nelif in_circle3:\nif "circle3" not in color_dict:\ncolor_dict["circle3"] = random_color_generator()\ncurrent_color = color_dict["circle3"]\nelse:\ncurrent_color = "white"\n\nctx.fillStyle = current_color\nctx.fillRect(px, py, 1, 1)\n\n# 設定三個圓的圓心與半徑\nx1, y1, r1 = 150, 200, 100 # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100 # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 300, 100 # 圓3：圓心 (200, 300)，半徑 100\n\n# 呼叫函式繪製三個圓\ndraw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n \n', 'tags': '', 'url': 'w14.html'}, {'title': 'w15', 'text': '題目一 : 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式. \n 1. 從 1 累加到 100 \n \n 題目二 : 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題) \n 2. addto \n 設計思考 ： \n \n \n Python 中累加整數區間最簡易的手法是使用 \xa0 range() \xa0 函式生成序列，然後用 \xa0 sum() \xa0 將其加總。 \n \n \n range(start, end+1) \xa0 會產生從 \xa0 start \xa0 到 \xa0 end \xa0 的所有整數值。 \n \n \n 最後將此序列直接套入 \xa0 sum() \xa0 即可得到區間總和。 \n \n \n 程式碼範例 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n \n \n \n """addto""" \n def addto(start, end): \n \xa0\xa0\xa0\xa0 return sum(range(start, end + 1)) \n \xa0 \n # 範例呼叫 \n result = addto(1, 100) \n print(result)\xa0 # 輸出 5050 \n \n \n \n \n \n \n \n 程式碼逐行解說 \n \n \n def addto(start, end): 定義一個函式名稱為 \xa0 addto ，有兩個參數 \xa0 start \xa0 與 \xa0 end ，代表加總的起始值和結束值。 \n \n \n return sum(range(start, end + 1)) range(start, end+1) \xa0 會產生從 \xa0 start \xa0 到 \xa0 end \xa0 的整數序列。例如 \xa0 range(1, 101) \xa0 代表 1 到 100。 sum(...) \xa0 會將 \xa0 range() \xa0 所產生的整數相加。 使用 \xa0 return \xa0 將計算結果回傳給呼叫端。 \n \n \n result = addto(1, 100) 呼叫 \xa0 addto(1, 100) ，會得到 1 加到 100 的總和結果，預期是 5050。 \n \n \n print(result) 將計算的結果印出來。 \n \n \n \n 執行結果與心得 \n 執行後結果為 \xa0 5050 ，符合數學上高斯求和公式 \xa0 (100*101)/2 \xa0 的結果。 透過內建函式 \xa0 sum() \xa0 與 \xa0 range() ，能快速且直觀地完成區間加總。 \n \n \n \n 題目三 : 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以\xa0 add_only_even 作為連結標題. \n 3. add_only_even \n 設計思考 ： \n \n \n 除了使用 \xa0 sum(range()) ，我們需要過濾只加偶數，因此有兩種思路： \n \n \n 使用條件判斷 \xa0 if num % 2 == 0 \xa0 在迴圈中累加。 \n \n \n 或使用 list comprehension 與 sum 搭配條件篩選。 \n \n \n \n \n 在此範例中，我們選擇單純迴圈判斷，較直觀易懂。 \n \n \n 程式碼範例 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n \n \n \n """add_only_even""" \n def add_only_even(start, end): \n \xa0\xa0\xa0\xa0 total = 0 \n \xa0\xa0\xa0\xa0 for num in range(start, end + 1): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if num % 2 == 0: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 total += num \n \xa0\xa0\xa0\xa0 return total \n \xa0 \n # 範例呼叫 \n result = add_only_even(1, 100) \n print(result)\xa0 # 將輸出 2 + 4 + 6 + ... + 100 的和 \n \n \n \n \n \n \n \n 程式碼逐行解說 \n \n \n def add_only_even(start, end): 定義函式 \xa0 add_only_even ，接收兩個參數用於決定加總的範圍。 \n \n \n total = 0 初始化一個計數器變數 \xa0 total \xa0 為 0，將用來累加符合條件的整數。 \n \n \n for num in range(start, end + 1): 使用 \xa0 range(start, end+1) \xa0 從 \xa0 start \xa0 整數循序到 \xa0 end \xa0 整數進行迭代。 \n \n \n if num % 2 == 0: 使用 \xa0 % \xa0 運算子判斷 \xa0 num \xa0 是否為偶數（被2整除餘數為0即為偶數）。 \n \n \n total += num 如果是偶數，就將 \xa0 num \xa0 的值加到 \xa0 total \xa0 變數中，不斷累加。 \n \n \n return total 當迴圈結束後，將累加結果回傳。 \n \n \n result = add_only_even(1, 100) 呼叫該函式以計算 1 到 100 之間的偶數加總。 \n \n \n print(result) 印出結果。 \n \n \n 執行結果與心得 \n 執行後結果為 \xa0 2550 。這是 2 + 4 + 6 + ... + 100 的總和。 過程中充分利用 \xa0 if \xa0 條件與迴圈來篩選特定的值，對程式碼的控制流程很直覺明白。 \n \n \n \n 題目四 : 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數,\xa0頁面中請以\xa0add_avoid_8 作為連結標題. \n 4. add_avoid_8 \n 設計思考 ： \n \n \n 關鍵在於 "避開出現8的數字"。我們需對每個整數檢查其字串表現形式是否包含字元 \xa0 \'8\' 。 \n \n \n 將整數 \xa0 num \xa0 轉成字串 \xa0 str(num) ，用 \xa0 \'8\' in str(num) \xa0 來判斷是否包含8這個字元。 \n \n \n 若不包含 \xa0 8 ，則將 \xa0 num \xa0 累加。 \n \n \n 程式碼範例 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n \n \n \n def add_avoid_8(start, end): \n \xa0\xa0\xa0\xa0 total = 0 \n \xa0\xa0\xa0\xa0 for num in range(start, end + 1): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if \'8\' not in str(num): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 total += num \n \xa0\xa0\xa0\xa0 return total \n \xa0 \n result = add_avoid_8(1, 100) \n print(result)\xa0 # 預計會把所有帶有8的數字如 8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98 排除 \n \n \n \n \n \n \n \n 程式碼逐行解說 \n \n \n def add_avoid_8(start, end): 定義函式名稱 \xa0 add_avoid_8 ，有兩個參數 \xa0 start 、 end 。 \n \n \n total = 0 將累加用的變數初始化為0。 \n \n \n for num in range(start, end + 1): 對從 \xa0 start \xa0 到 \xa0 end \xa0 間的每一個整數 \xa0 num \xa0 進行迭代。 \n \n \n if \'8\' not in str(num): 將 \xa0 num \xa0 轉為字串後，檢查字串中是否包含 \xa0 8 \xa0 字元。 若不包含，就表示此數字沒有出現數字「8」，符合條件。 \n \n \n total += num 若符合條件(不含8)，則將該 \xa0 num \xa0 加入 \xa0 total 。 \n \n \n return total 迴圈執行完畢後，回傳最終的累加結果。 \n \n \n result = add_avoid_8(1, 100) 呼叫該函式，以計算 1 到 100 中不含數字8的整數加總。 \n \n \n print(result) 印出結果。 \n \n \n 執行結果與心得 \n 執行後的結果會略小於 5050，因為移除了所有出現 8 的數字。 這個題目顯示了如何透過字串判斷來排除特定條件的數字，拓展了對整數篩選的思考方式。 實際執行後，可觀察結果，並藉此驗證程式碼邏輯的正確性，並可進一步測試其他範圍或條件。 \n (若欲得知實際結果，可執行程式碼。大致上，移除8、18、28、...、98及80~89共計19個數字，即移除的總和約為8 + 18 + 28 + 38 + 48 + 58 + 68 + 78 + (80到89的十個數字) + 98。透過實際執行，可確認結果正確性。) \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '題目: 請以 自己的學號最後四碼 作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 ( 圖片來源 ) \n Exam1 程式碼 \n \n \n 心得:\n \n 結構化設計： \n \n 代碼清晰且層次分明，每一段都專注於繪製特定的元素，便於維護與調整。 \n 使用偏移量 ( offset_x \xa0 和 \xa0 offset_y ) 將圖形定位相對於基準點，讓圖形的重新排列變得簡單直觀。 \n \n \n 多樣化形狀： \n \n 展現了如何利用 Canvas API 繪製多種幾何圖形（六邊形、菱形、三角形、圓形等）。 \n 顏色搭配鮮明，區分不同形狀，提升視覺效果。 \n \n \n 座標系統的應用： \n \n 通過繪製 X、Y 軸和標示原點座標，為整體設計提供了參考框架，便於後續的圖形定位。 \n \n \n Canvas API 的掌握： \n \n 熟練運用 \xa0 moveTo 、 lineTo 、 arc \xa0 和 \xa0 rect \xa0 等方法進行圖形繪製，展現了對 Canvas 基本功能的靈活應用。 學習收穫 \n \n 基礎圖形構建： \xa0 深入理解 Canvas 的繪圖模型，掌握從簡單線條到複雜幾何圖形的繪製方法。 \n 數學與編程的結合： \xa0 通過幾何計算（如角度、圓弧等）實現形狀的精確繪製，提升數學與編程結合的能力。 \n 圖形座標系統的應用： \xa0 透過偏移量與基準點的設置，靈活管理圖形的佈局與結構。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': "題目一: 請以 自己的學號最後四碼 作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用\xa0 pixel=2 的藍色直線 ,\xa0 自訂迷宮畫布大小 , 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像). \n Exam2 程式碼 \n \n 心得: \n 程式學習收穫： \n 改進方向與延伸運用： \n \n \n 互動式迷宮： \n \n \n 添加用戶輸入功能，例如使用鍵盤方向鍵控制迷宮中的移動。 \n \n \n 在迷宮起點和終點設置指示點，用不同顏色或標誌表示，增強迷宮的互動性。 \n \n \n \n \n 自動生成迷宮： \n \n \n 實現一個算法（如深度優先搜索或Prim's Algorithm），動態生成迷宮路徑，避免手動編碼迷宮結構。 \n \n \n 將生成的迷宮數據存儲為陣列結構，然後根據數據繪製圖形。 \n \n \n \n \n 色彩與動態： \n \n \n 在迷宮中使用不同的顏色表示牆壁、路徑和探索進度。 \n \n \n 添加動畫效果，逐步展示迷宮的解路徑。 \n \n \n \n \n 擴展功能： \n \n \n 將迷宮保存為圖像文件（例如 \xa0 .png ）。 \n \n \n 添加計時器，讓用戶挑戰解迷宮的速度。 \n \n \n 設置障礙或陷阱增加挑戰難度。 \n \n \n \n \n \n \n Canvas API 的應用： \xa0 深入學習 \xa0 beginPath() 、 moveTo() \xa0 和 \xa0 lineTo() \xa0 等核心方法，掌握如何控制圖形繪製過程。 \n \n \n 代碼可讀性提升： \xa0 系統性地添加註解，讓代碼不僅對自己而且對團隊成員更容易理解和修改。 \n \n \n 邏輯規劃： \xa0 將迷宮分段繪製，條理清晰，提升了程式設計的規劃能力。 \n \n \n", 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': '題目一: 請以 自己的學號最後四碼 作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 \xa0 pixel=2 的黑色直線 , \xa0 自訂迷宮畫布大小 , 直接在頁面畫出下列圖像, 並且 利用紅色連續線段標示從上方入口, 走至下方出口的路線圖 . \n 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像). \n Exam3 程式碼 \n \n 心得: \n 起初透過chatgpt了解繪製code功能及語法，接著自行計算撰寫code，尋找對應的色碼輸入後，再將程式上傳。 整個學期讓我在課堂不只學習計算機程式的內容，也讓我學會更好運用gpt來學習，也不僅僅只是copy，而是不斷詢問不理解的地方來弭補知識不足，弭補英文弱的缺點，gpt也能將我不理解的地方進行加強備註，將來再看還是能看懂。 \n \n 靈活使用 HTML Canvas API 透過 \xa0 ctx.beginPath() \xa0 等 API，可以有效管理繪圖路徑並避免線條相互干擾。此外，運用 \xa0 moveTo \xa0 和 \xa0 lineTo \xa0 等方法，清晰地描述迷宮的各部分結構，讓繪製過程井然有序。 \n 模組化與參數化設計 在程式中利用變數（如 \xa0 origin_x \xa0 和 \xa0 origin_y ），可以輕鬆調整整體迷宮的位置偏移，讓繪圖更靈活。這種參數化的設計有助於後續維護及擴展。 \n 走迷宮邏輯的規劃 使用單獨的區塊繪製走迷宮路徑，將每一步都以簡單的線條指令表示，讓迷宮的解法可視化，直觀易懂。 \n 色彩與線條設置 運用 \xa0 strokeStyle \xa0 和 \xa0 lineWidth ，明確區分迷宮框架與解路徑，提升圖形的可讀性和視覺效果。 \n 程式結構的清晰性 透過明確的註解，對程式的每個部分進行詳細解釋，這不僅方便日後檢視，也利於其他開發者理解。 \n 學習與應用 Canvas API 的實踐 這次實現迷宮繪製的過程提供了全面操作 Canvas 的實踐機會，涵蓋了基本線條繪製、文字繪製、色彩管理等多方面內容。 \n 改進空間 \n \n 可以將迷宮的結構數據化，使用陣列或物件表示迷宮結構，進一步提高程式的可重用性。 \n 自動生成迷宮路徑，增強互動性與挑戰性。 \n 增加迷宮的動畫效果，讓視覺呈現更動態化。 \n \n \n \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n \n 期末書面專題報告檔案 (pdf): \n 期末報告 \n 電腦輔助設計與實習課程總結心得: \n 本學期的學習不僅鞏固了我的專業基礎，也幫助我建立了解決實際問題的能力。我深刻體會到，程式相關知識的學習需要理論與實踐並重，未來我會繼續以此為目標，追求更高層次的學習與成就。 \n 期末報告自評成績: \n 出席 10 分 + Github Classroom 作業與隨堂考試 50 分 + 期末口頭與書面專題報告 10分 = 70 分 \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};