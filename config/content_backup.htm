<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323140">https://github.com/mdecp2024/hw-41323140</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323140/content/index.html">https://mdecp2024.github.io/hw-41323140/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BpPNAkXo5Sc?si=GaOstUvpyCBur4BU" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/V4l0c2B6KCc" width="560"></iframe></p>
<p>題目二</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yEKmn9dI8Vw" width="560"></iframe></p>
<p>題目三</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/NooOLgG97No" width="560"></iframe></p>
<p><span>做這三個題目讓我對這些軟體更加熟悉了</span></p>
<h3>w11_hw</h3>
<p>作業一</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Qqih0xPPKSk" width="560"></iframe></p>
<p><span>已知可以用 Python 程式由上往下列印三角形 *, 或由左往右列印三角形 *, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行.</span></p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/7675425b89f53e467ddf34328b81c9f5/raw/18e88f2deadbf3a512b33e671b526b5f03969b1f/hw_1.py" style="color: #0000ff;">w11_hw1</a></span></p>
<p><span></span></p>
<p>作業二</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DzfQZDIlUXw" width="560"></iframe></p>
<p><span>已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</span></p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/7675425b89f53e467ddf34328b81c9f5/raw/18e88f2deadbf3a512b33e671b526b5f03969b1f/hw_2.py" style="color: #0000ff;">w11_hw2</a></span></p>
<p><img alt="" height="497" src="/images/螢幕擷取畫面 2024-11-28 152829.png" width="497"/></p>
<p>心得:</p>
<h3>w12_hw</h3>
<p>第一題: input() 與 print()</p>
<p><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/733f9f82bd1f8ccadeda9212f073a4ce/raw/ccb0cce95a0a08a8c1ad4aec0cc825d9672af852/1212.py">程式</a></p>
<p><span>程式<span style="background-color: #ffffff; color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/733f9f82bd1f8ccadeda9212f073a4ce/raw/ccb0cce95a0a08a8c1ad4aec0cc825d9672af852/cat.py" style="background-color: #ffffff; color: #0000ff;">貓咪</a></span></span></p>
<p><span>第二題: </span></p>
<p></p>
<p></p>
<p></p><h3>w13_hw</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tgu1O5peoig" width="560"></iframe></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/37cc8641f64e746f19c9e47bd319e44d/raw/0371f25a924356927a97077778ced656e804947f/hw1.py" style="color: #0000ff;">正確答案</a></span></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>心得:<span>這個程式碼花了好多時間問了 Chat gpt 好多次，才問到現在這個圖形。</span></div>
<div><span></span></div>
<div><span></span></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'blue'  
ctx.beginPath()
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()


from browser import html
from browser import document as doc
import math
  
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
  
ctx = canvas.getContext("2d")
ctx.lineWidth = 4
 
#混色的
ctx.globalCompositeOperation = "screem"
 
 
#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Tomato"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "FloralWhite"
ctx.fill()
ctx.stroke()
 
#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Purple"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "OliveDrab"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Orange"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "MediumVioletRed"
ctx.fill()
ctx.stroke()
 
 
#紅方形*2(4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
 
  
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()
 
 
#籃斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()


from browser import html
from browser import document as doc

# 建立 canvas
canvas = html.CANVAS(width=300, height=300)  # 畫布大小
brython_div = doc["brython_div1"]  # HTML 中的容器元素
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2  # 線條寬度設定

# 第一個矩形的參數
rect1_x, rect1_y = 50, 50  # 矩形左上角座標
rect1_size = 100  # 矩形邊長

# 第二個矩形的參數
rect2_x, rect2_y = 100, 100  # 矩形左上角座標
rect2_size = 100  # 矩形邊長

# 填充第一個矩形的外接圓內部
center_x1 = rect1_x + rect1_size / 2
center_y1 = rect1_y + rect1_size / 2
radius1 = (rect1_size * (2 ** 0.5)) / 2
ctx.fillStyle = "rgba(255, 255, 0, 0.5)"  # 半透明黃色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.fill()

# 填充第二個矩形的外接圓內部
center_x2 = rect2_x + rect2_size / 2
center_y2 = rect2_y + rect2_size / 2
radius2 = (rect2_size * (2 ** 0.5)) / 2
ctx.fillStyle = "rgba(128, 0, 128, 0.5)"  # 半透明紫色
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.fill()

# 填充第一個矩形內部
ctx.fillStyle = "lightblue"  # 填充顏色
ctx.beginPath()
ctx.rect(rect1_x, rect1_y, rect1_size, rect1_size)
ctx.fill()

# 填充第二個矩形內部
ctx.fillStyle = "lightgreen"  # 填充顏色
ctx.beginPath()
ctx.rect(rect2_x, rect2_y, rect2_size, rect2_size)
ctx.fill()

# 繪製第一個矩形的對角線
ctx.strokeStyle = 'blue'  # 對角線顏色
ctx.beginPath()
ctx.moveTo(rect1_x, rect1_y)  # 左上角
ctx.lineTo(rect1_x + rect1_size, rect1_y + rect1_size)  # 右下角
ctx.stroke()

# 繪製第一個矩形的邊框
ctx.strokeStyle = "red"  # 邊框顏色
ctx.beginPath()
ctx.rect(rect1_x, rect1_y, rect1_size, rect1_size)
ctx.stroke()

# 繪製第二個矩形的邊框
ctx.beginPath()
ctx.rect(rect2_x, rect2_y, rect2_size, rect2_size)
ctx.stroke()

# 繪製第一個矩形的外接圓邊框
ctx.strokeStyle = 'black'  # 外接圓邊框顏色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.stroke()

# 繪製第二個矩形的外接圓邊框
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.stroke()
</script>
</p>
<p><br/><br/></p>
<h3>w14</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><span>1.<span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/96e2d3ee2ea605a5bacaae736d17bbe1/raw/c8d50f00c68b60739d2b6f044368c9b247fae7cc/hw1.py" style="color: #0000ff;">三個圓的區域塗色任務</a></span></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義初始化畫布函式
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
canvas = html.CANVAS(width=canvas_width, height=canvas_height)
brython_div = doc[id]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")
return canvas, ctx

# 定義隨機顏色生成函式
def random_color_generator():
r = random.randint(0, 255)
g = random.randint(0, 255)
b = random.randint(0, 255)
return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行塗色處理
def draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
canvas, ctx = initialize_canvas(400, 400)
ctx.clearRect(0, 0, canvas.width, canvas.height)

color_dict = {}

for py in range(0, canvas.height):
for px in range(0, canvas.width):
# 判斷點是否在三個圓內
in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

if in_circle1 and in_circle2 and in_circle3:
if "all_three" not in color_dict:
color_dict["all_three"] = random_color_generator()
current_color = color_dict["all_three"]
elif in_circle1 and in_circle2:
if "circle1_circle2" not in color_dict:
color_dict["circle1_circle2"] = random_color_generator()
current_color = color_dict["circle1_circle2"]
elif in_circle1 and in_circle3:
if "circle1_circle3" not in color_dict:
color_dict["circle1_circle3"] = random_color_generator()
current_color = color_dict["circle1_circle3"]
elif in_circle2 and in_circle3:
if "circle2_circle3" not in color_dict:
color_dict["circle2_circle3"] = random_color_generator()
current_color = color_dict["circle2_circle3"]
elif in_circle1:
if "circle1" not in color_dict:
color_dict["circle1"] = random_color_generator()
current_color = color_dict["circle1"]
elif in_circle2:
if "circle2" not in color_dict:
color_dict["circle2"] = random_color_generator()
current_color = color_dict["circle2"]
elif in_circle3:
if "circle3" not in color_dict:
color_dict["circle3"] = random_color_generator()
current_color = color_dict["circle3"]
else:
current_color = "white"

ctx.fillStyle = current_color
ctx.fillRect(px, py, 1, 1)

# 設定三個圓的圓心與半徑
x1, y1, r1 = 150, 200, 100 # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100 # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 300, 100 # 圓3：圓心 (200, 300)，半徑 100

# 呼叫函式繪製三個圓
draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p></p>
<h3>w15</h3>
<p><em><strong>題目一</strong></em>: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<p>1.<span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/f010c710f0ac6fe11173c60156798f6a/raw/437d888d5eb889c2d6f46bf3a764d361429a9f18/hw1.py" style="color: #0000ff;">從 1 累加到 100</a></span></p>
<p></p>
<p><em><strong>題目二</strong></em>: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</p>
<p>2.<span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/f010c710f0ac6fe11173c60156798f6a/raw/437d888d5eb889c2d6f46bf3a764d361429a9f18/hw2.py" style="color: #0000ff;">addto</a></span></p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>Python 中累加整數區間最簡易的手法是使用<span> </span><code>range()</code><span> </span>函式生成序列，然後用<span> </span><code>sum()</code><span> </span>將其加總。</p>
</li>
<li>
<p><code>range(start, end+1)</code><span> </span>會產生從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>的所有整數值。</p>
</li>
<li>
<p>最後將此序列直接套入<span> </span><code>sum()</code><span> </span>即可得到區間總和。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<div>
<div class="syntaxhighlighter html" id="highlighter_418440">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="html plain">"""addto"""</code></div>
<div class="line number2 index1 alt1"><code class="html plain">def addto(start, end):</code></div>
<div class="line number3 index2 alt2"><code class="html spaces">    </code><code class="html plain">return sum(range(start, end + 1))</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="html plain"># 範例呼叫</code></div>
<div class="line number6 index5 alt1"><code class="html plain">result = addto(1, 100)</code></div>
<div class="line number7 index6 alt2"><code class="html plain">print(result)  # 輸出 5050</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def addto(start, end):</code><br/>定義一個函式名稱為<span> </span><code>addto</code>，有兩個參數<span> </span><code>start</code><span> </span>與<span> </span><code>end</code>，代表加總的起始值和結束值。</p>
</li>
<li>
<p><code>return sum(range(start, end + 1))</code><br/><code>range(start, end+1)</code><span> </span>會產生從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>的整數序列。例如<span> </span><code>range(1, 101)</code><span> </span>代表 1 到 100。<br/><code>sum(...)</code><span> </span>會將<span> </span><code>range()</code><span> </span>所產生的整數相加。<br/>使用<span> </span><code>return</code><span> </span>將計算結果回傳給呼叫端。</p>
</li>
<li>
<p><code>result = addto(1, 100)</code><br/>呼叫<span> </span><code>addto(1, 100)</code>，會得到 1 加到 100 的總和結果，預期是 5050。</p>
</li>
<li>
<p><code>print(result)</code><br/>將計算的結果印出來。</p>
<p></p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後結果為<span> </span><code>5050</code>，符合數學上高斯求和公式<span> </span><code>(100*101)/2</code><span> </span>的結果。<br/>透過內建函式<span> </span><code>sum()</code><span> </span>與<span> </span><code>range()</code>，能快速且直觀地完成區間加總。</p>
<p></p>
<p></p>
<p></p>
<p><em><strong>題目三</strong></em>: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 <span>add_only_even 作為連結標題.</span></p>
<p><span>3.<span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/f010c710f0ac6fe11173c60156798f6a/raw/437d888d5eb889c2d6f46bf3a764d361429a9f18/hw3.py" style="color: #0000ff;">add_only_even</a></span></span></p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>除了使用<span> </span><code>sum(range())</code>，我們需要過濾只加偶數，因此有兩種思路：</p>
<ul>
<li>
<p>使用條件判斷<span> </span><code>if num % 2 == 0</code><span> </span>在迴圈中累加。</p>
</li>
<li>
<p>或使用 list comprehension 與 sum 搭配條件篩選。</p>
</li>
</ul>
</li>
<li>
<p>在此範例中，我們選擇單純迴圈判斷，較直觀易懂。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<div>
<div class="syntaxhighlighter html" id="highlighter_705337">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="html plain">"""add_only_even"""</code></div>
<div class="line number2 index1 alt1"><code class="html plain">def add_only_even(start, end):</code></div>
<div class="line number3 index2 alt2"><code class="html spaces">    </code><code class="html plain">total = 0</code></div>
<div class="line number4 index3 alt1"><code class="html spaces">    </code><code class="html plain">for num in range(start, end + 1):</code></div>
<div class="line number5 index4 alt2"><code class="html spaces">        </code><code class="html plain">if num % 2 == 0:</code></div>
<div class="line number6 index5 alt1"><code class="html spaces">            </code><code class="html plain">total += num</code></div>
<div class="line number7 index6 alt2"><code class="html spaces">    </code><code class="html plain">return total</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="html plain"># 範例呼叫</code></div>
<div class="line number10 index9 alt1"><code class="html plain">result = add_only_even(1, 100)</code></div>
<div class="line number11 index10 alt2"><code class="html plain">print(result)  # 將輸出 2 + 4 + 6 + ... + 100 的和</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def add_only_even(start, end):</code><br/>定義函式<span> </span><code>add_only_even</code>，接收兩個參數用於決定加總的範圍。</p>
</li>
<li>
<p><code>total = 0</code><br/>初始化一個計數器變數<span> </span><code>total</code><span> </span>為 0，將用來累加符合條件的整數。</p>
</li>
<li>
<p><code>for num in range(start, end + 1):</code><br/>使用<span> </span><code>range(start, end+1)</code><span> </span>從<span> </span><code>start</code><span> </span>整數循序到<span> </span><code>end</code><span> </span>整數進行迭代。</p>
</li>
<li>
<p><code>if num % 2 == 0:</code><br/>使用<span> </span><code>%</code><span> </span>運算子判斷<span> </span><code>num</code><span> </span>是否為偶數（被2整除餘數為0即為偶數）。</p>
</li>
<li>
<p><code>total += num</code><br/>如果是偶數，就將<span> </span><code>num</code><span> </span>的值加到<span> </span><code>total</code><span> </span>變數中，不斷累加。</p>
</li>
<li>
<p><code>return total</code><br/>當迴圈結束後，將累加結果回傳。</p>
</li>
<li>
<p><code>result = add_only_even(1, 100)</code><br/>呼叫該函式以計算 1 到 100 之間的偶數加總。</p>
</li>
<li>
<p><code>print(result)</code><br/>印出結果。</p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後結果為<span> </span><code>2550</code>。這是 2 + 4 + 6 + ... + 100 的總和。<br/>過程中充分利用<span> </span><code>if</code><span> </span>條件與迴圈來篩選特定的值，對程式碼的控制流程很直覺明白。</p>
<p></p>
<p></p>
<p></p>
<p><span><em><strong>題目四</strong></em>: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><span>4.<span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/f010c710f0ac6fe11173c60156798f6a/raw/437d888d5eb889c2d6f46bf3a764d361429a9f18/hw4.py" style="color: #0000ff;">add_avoid_8</a></span></span></p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>關鍵在於 "避開出現8的數字"。我們需對每個整數檢查其字串表現形式是否包含字元<span> </span><code>'8'</code>。</p>
</li>
<li>
<p>將整數<span> </span><code>num</code><span> </span>轉成字串<span> </span><code>str(num)</code>，用<span> </span><code>'8' in str(num)</code><span> </span>來判斷是否包含8這個字元。</p>
</li>
<li>
<p>若不包含<span> </span><code>8</code>，則將<span> </span><code>num</code><span> </span>累加。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<div>
<div class="syntaxhighlighter html" id="highlighter_564256">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="html plain">def add_avoid_8(start, end):</code></div>
<div class="line number2 index1 alt1"><code class="html spaces">    </code><code class="html plain">total = 0</code></div>
<div class="line number3 index2 alt2"><code class="html spaces">    </code><code class="html plain">for num in range(start, end + 1):</code></div>
<div class="line number4 index3 alt1"><code class="html spaces">        </code><code class="html plain">if '8' not in str(num):</code></div>
<div class="line number5 index4 alt2"><code class="html spaces">            </code><code class="html plain">total += num</code></div>
<div class="line number6 index5 alt1"><code class="html spaces">    </code><code class="html plain">return total</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="html plain">result = add_avoid_8(1, 100)</code></div>
<div class="line number9 index8 alt2"><code class="html plain">print(result)  # 預計會把所有帶有8的數字如 8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98 排除</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def add_avoid_8(start, end):</code><br/>定義函式名稱<span> </span><code>add_avoid_8</code>，有兩個參數<span> </span><code>start</code>、<code>end</code>。</p>
</li>
<li>
<p><code>total = 0</code><br/>將累加用的變數初始化為0。</p>
</li>
<li>
<p><code>for num in range(start, end + 1):</code><br/>對從<span> </span><code>start</code><span> </span>到<span> </span><code>end</code><span> </span>間的每一個整數<span> </span><code>num</code><span> </span>進行迭代。</p>
</li>
<li>
<p><code>if '8' not in str(num):</code><br/>將<span> </span><code>num</code><span> </span>轉為字串後，檢查字串中是否包含<span> </span><code>8</code><span> </span>字元。<br/>若不包含，就表示此數字沒有出現數字「8」，符合條件。</p>
</li>
<li>
<p><code>total += num</code><br/>若符合條件(不含8)，則將該<span> </span><code>num</code><span> </span>加入<span> </span><code>total</code>。</p>
</li>
<li>
<p><code>return total</code><br/>迴圈執行完畢後，回傳最終的累加結果。</p>
</li>
<li>
<p><code>result = add_avoid_8(1, 100)</code><br/>呼叫該函式，以計算 1 到 100 中不含數字8的整數加總。</p>
</li>
<li>
<p><code>print(result)</code><br/>印出結果。</p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後的結果會略小於 5050，因為移除了所有出現<code>8</code>的數字。<br/>這個題目顯示了如何透過字串判斷來排除特定條件的數字，拓展了對整數篩選的思考方式。<br/>實際執行後，可觀察結果，並藉此驗證程式碼邏輯的正確性，並可進一步測試其他範圍或條件。</p>
<p>(若欲得知實際結果，可執行程式碼。大致上，移除8、18、28、...、98及80~89共計19個數字，即移除的總和約為8 + 18 + 28 + 38 + 48 + 58 + 68 + 78 + (80到89的十個數字) + 98。透過實際執行，可確認結果正確性。)</p>
<p><span></span></p>
<p><span></span></p>
<p><span><strong></strong></span></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p>題目: 請以<span>自己的學號最後四碼</span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (<a href="https://www.ccplusmedia.com/wp-content/uploads/2019/10/creative-ad_landscape3.jpg">圖片來源</a>)</p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/e7d489f1205730a8eef3f7f6391fdd39/raw/7b3ab7172a889dc68c8e6b1056baca97cca4f05e/exam1.py" style="color: #0000ff;">Exam1 程式碼</a></span></p>
<div><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/E_aiVnpvClU" width="560"></iframe></div>
<div></div>
<div>心得:
<ul>
<li><strong>結構化設計：</strong>
<ul>
<li>代碼清晰且層次分明，每一段都專注於繪製特定的元素，便於維護與調整。</li>
<li>使用偏移量 (<code>offset_x</code><span> </span>和<span> </span><code>offset_y</code>) 將圖形定位相對於基準點，讓圖形的重新排列變得簡單直觀。</li>
</ul>
</li>
<li><strong>多樣化形狀：</strong>
<ul>
<li>展現了如何利用 Canvas API 繪製多種幾何圖形（六邊形、菱形、三角形、圓形等）。</li>
<li>顏色搭配鮮明，區分不同形狀，提升視覺效果。</li>
</ul>
</li>
<li><strong>座標系統的應用：</strong>
<ul>
<li>通過繪製 X、Y 軸和標示原點座標，為整體設計提供了參考框架，便於後續的圖形定位。</li>
</ul>
</li>
<li><strong>Canvas API 的掌握：</strong>
<ul>
<li>熟練運用<span> </span><code>moveTo</code>、<code>lineTo</code>、<code>arc</code><span> </span>和<span> </span><code>rect</code><span> </span>等方法進行圖形繪製，展現了對 Canvas 基本功能的靈活應用。<strong>學習收穫</strong>
<ul>
<li><strong>基礎圖形構建：</strong><span> </span>深入理解 Canvas 的繪圖模型，掌握從簡單線條到複雜幾何圖形的繪製方法。</li>
<li><strong>數學與編程的結合：</strong><span> </span>通過幾何計算（如角度、圓弧等）實現形狀的精確繪製，提升數學與編程結合的能力。</li>
<li><strong>圖形座標系統的應用：</strong><span> </span>透過偏移量與基準點的設置，靈活管理圖形的佈局與結構。</li>
</ul>
</li>
</ul>
</li>
</ul>
</div><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/e7d489f1205730a8eef3f7f6391fdd39/raw/245b14b39efb4b7a5d7ec370bd1b992c9589dd36/exam2.py" style="color: #0000ff;">Exam2 程式碼</a></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/VozNuTOIMek" width="560"></iframe></p>
<p>心得:</p>
<p><strong>程式學習收穫：</strong></p>
<p><strong>改進方向與延伸運用：</strong></p>
<ol>
<li>
<p><strong>互動式迷宮：</strong></p>
<ul>
<li>
<p>添加用戶輸入功能，例如使用鍵盤方向鍵控制迷宮中的移動。</p>
</li>
<li>
<p>在迷宮起點和終點設置指示點，用不同顏色或標誌表示，增強迷宮的互動性。</p>
</li>
</ul>
</li>
<li>
<p><strong>自動生成迷宮：</strong></p>
<ul>
<li>
<p>實現一個算法（如深度優先搜索或Prim's Algorithm），動態生成迷宮路徑，避免手動編碼迷宮結構。</p>
</li>
<li>
<p>將生成的迷宮數據存儲為陣列結構，然後根據數據繪製圖形。</p>
</li>
</ul>
</li>
<li>
<p><strong>色彩與動態：</strong></p>
<ul>
<li>
<p>在迷宮中使用不同的顏色表示牆壁、路徑和探索進度。</p>
</li>
<li>
<p>添加動畫效果，逐步展示迷宮的解路徑。</p>
</li>
</ul>
</li>
<li>
<p><strong>擴展功能：</strong></p>
<ul>
<li>
<p>將迷宮保存為圖像文件（例如<span> </span><code>.png</code>）。</p>
</li>
<li>
<p>添加計時器，讓用戶挑戰解迷宮的速度。</p>
</li>
<li>
<p>設置障礙或陷阱增加挑戰難度。</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>
<p><strong>Canvas API 的應用：</strong><span> </span>深入學習<span> </span><code>beginPath()</code>、<code>moveTo()</code><span> </span>和<span> </span><code>lineTo()</code><span> </span>等核心方法，掌握如何控制圖形繪製過程。</p>
</li>
<li>
<p><strong>代碼可讀性提升：</strong><span> </span>系統性地添加註解，讓代碼不僅對自己而且對團隊成員更容易理解和修改。</p>
</li>
<li>
<p><strong>邏輯規劃：</strong><span> </span>將迷宮分段繪製，條理清晰，提升了程式設計的規劃能力。</p>
</li>
</ul><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p>題目一: 請以<span>自己的學號最後四碼</span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用<span> </span><span>pixel=2 的黑色直線</span>,<span> </span><span>自訂迷宮畫布大小</span>, 直接在頁面畫出下列圖像, 並且<span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span>.</p>
<p>繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/e7d489f1205730a8eef3f7f6391fdd39/raw/9bdb64ba0f97501a8ec03aab49eeaf94f572e895/exam3.py" style="color: #0000ff;">Exam3 程式碼</a></span></p>
<p><span style="color: #0000ff;"><a href="https://mdecp2024.github.io/hw-41323140/content/Brython.html?src=https://gist.githubusercontent.com/41323140/e7d489f1205730a8eef3f7f6391fdd39/raw/9bdb64ba0f97501a8ec03aab49eeaf94f572e895/exam3.py" style="color: #0000ff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9AZm-YcIib8" width="560"></iframe></a></span></p>
<p><span style="color: #000000;"><span color="#0000ff">心得:</span></span></p>
<p><span>起初透過chatgpt了解繪製code功能及語法，接著自行計算撰寫code，尋找對應的色碼輸入後，再將程式上傳。<br/>整個學期讓我在課堂不只學習計算機程式的內容，也讓我學會更好運用gpt來學習，也不僅僅只是copy，而是不斷詢問不理解的地方來弭補知識不足，弭補英文弱的缺點，gpt也能將我不理解的地方進行加強備註，將來再看還是能看懂。</span></p>
<ul>
<li><strong>靈活使用 HTML Canvas API</strong><br/>透過<span> </span><code>ctx.beginPath()</code><span> </span>等 API，可以有效管理繪圖路徑並避免線條相互干擾。此外，運用<span> </span><code>moveTo</code><span> </span>和<span> </span><code>lineTo</code><span> </span>等方法，清晰地描述迷宮的各部分結構，讓繪製過程井然有序。</li>
<li><strong>模組化與參數化設計</strong><br/>在程式中利用變數（如<span> </span><code>origin_x</code><span> </span>和<span> </span><code>origin_y</code>），可以輕鬆調整整體迷宮的位置偏移，讓繪圖更靈活。這種參數化的設計有助於後續維護及擴展。</li>
<li><strong>走迷宮邏輯的規劃</strong><br/>使用單獨的區塊繪製走迷宮路徑，將每一步都以簡單的線條指令表示，讓迷宮的解法可視化，直觀易懂。</li>
<li><strong>色彩與線條設置</strong><br/>運用<span> </span><code>strokeStyle</code><span> </span>和<span> </span><code>lineWidth</code>，明確區分迷宮框架與解路徑，提升圖形的可讀性和視覺效果。</li>
<li><strong>程式結構的清晰性</strong><br/>透過明確的註解，對程式的每個部分進行詳細解釋，這不僅方便日後檢視，也利於其他開發者理解。</li>
<li><strong>學習與應用 Canvas API 的實踐</strong><br/>這次實現迷宮繪製的過程提供了全面操作 Canvas 的實踐機會，涵蓋了基本線條繪製、文字繪製、色彩管理等多方面內容。</li>
<li><strong>改進空間</strong>
<ul>
<li>可以將迷宮的結構數據化，使用陣列或物件表示迷宮結構，進一步提高程式的可重用性。</li>
<li>自動生成迷宮路徑，增強互動性與挑戰性。</li>
<li>增加迷宮的動畫效果，讓視覺呈現更動態化。</li>
</ul>
</li>
</ul><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>